#+TITLE:     2013-FA-CS-336-LA-05-AndyS-SheaN
#+AUTHOR:    Andrew Schwartzmeyer, Shea Newton
#+EMAIL:     schw2620@vandals.uidaho.edu
#+DATE:      2013-11-30 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

* TODO LA-05 SSL :noexport:
   DEADLINE: <2013-11-24 Sun>

For this laboratory assignment please follow the instructions in the
laboratory in the link below and for preparing your laboratory report
please follow the instructions in this posting plus all the guidelines
posted within this course site under Course Info -> Coursework
Submission Instructions -> LA-Laboratory Report Submissions.

Secure Web and SSL/TLS

Laboratory Instructions:

http://csis.pace.edu/~lchen/sweet/modules/3-SecureTransaction.pdf

These laboratories have been developed by Li-Chiou Chen of Pace
University and collaborators with sponsorship from the National
Science Foundation (NSF).

Prepare and submit a laboratory report in PDF following the guidelines
posted within this course site under Course Info -> Coursework
Submission Instructions -> LA-Laboratory Report Submissions.

* 4.1.1 Web Browser Certificate Management
Protocols used for web transactions:
- SSL 3.0
- TLS 1.0

\noindent Two Certificate Authorities:
- Baltimore CyberTrust Root
- certSigh ROOT CA

\newpage

#+CAPTION: Baltimore CyberTrust Root Certificate
#+NAME:   fig:SED-HR4049
[[./baltimore.png]]


\noindent Encryption Algorithms
- Baltimore CyberTrust Root
   - PKCS #1 with SHA-1 With RSA Encryption
- certSIGN ROOT CA
  - PKCS #1 with SHA-1 With RSA Encryption



\noindent Public Key field:
- Baltimore CyberTrust Root
  - 2048 bits
- certSIGN ROOT CA
  - 2048 bits

\noindent Protocol to verify certificates:
- Online Certificate Status Protocol (OCSP)

\noindent When OCSP certificate is treated as invalid when:
- If certificate has been revoked by issuing authority OCSP server
  connection will fail and certificate will be treated as invalid.

* 4.1.2 Creating SSL Certificates Using OpenSSL
** Creating public/private key pair
To generate a Certificate Signing Request (CSR), first we must generate our
own public/private key pair (in the directory ~/etc/apache2/ssl~ for
convenience), using the command ~sudo openssl genrsa -des3 -out
server.key 1024~. We used the passphrase "lab5".

** Generating the CSR
Next we store said passphrase in ~/etc/apache2/ssl_passphrase~,
replacing the current entry of "123456". With this done, we now
generate an actual CSR with the command ~sudo openssl req -new -key
server.key -out server.csr~, filling in the certificate information
with that provided by the lab.

** Generating our certificate
Now we make our own self-signed certificate valid for a year with the
command:

#+BEGIN_SRC shell
sudo openssl x509 -req -days 365 -in server.csr
    -signkey server.key -out server.crt
#+END_SRC

* 4.2 Configuring Apache2 with BadStore.net
** Enabling SSL module for Apache2
We're asked to enable the SSL module for Apache 2 with the command
~sudo a2enmod ssl~; however, it was already enabled.

** Creating BadStore.net's VirtualHost
We copy Apache2's default virtual host configuration from
~/etc/apache2/sites-available/default~ to
~/etc/apache2/sites-available/www.badstore.net~. Of course, we not
have to adjust the VirtualHost port to 443, add the line "ServerName
www.badstore.net:443", change the DocumentRoot and Directory to point
to ~/var/www/badstore~, and enable SSL for the host with the lines:

#+BEGIN_SRC text
SSLEngine On
SSLCertificateFile /etc/apache2/ssl/server.crt
SSLCertificateKeyFile /etc/apache2/ssl/server.key
#+END_SRC

** Enabling the site
We now enable the site with the command ~sudo a2ensite
www.badstore.net~, and restart the Apache2 server with ~sudo service
apache2 restart~.

** Editing the hosts file
Since this is a local site, we change our hosts file to point
127.0.0.1 from localhost to the Apache2 VirtualHost www.badstore.net.

\newpage
* 4.3 Running a Secure Web Server
Going to the URL "http://www.badstore.net" (not, contrary to the lab,
localhost, as it no longer resolves to anything since we previously
removed it from our hosts file), will resolve to Apache2's default
website (the "It works!" page), as our hosts file points to the IP
127.0.0.1 (on which Apache is listening), and specifying http instead
of https uses port 80, for which Apache's default site is
listening. Our VirtualHost listens only to 443.

#+CAPTION: HTTP It Works Page
#+NAME:   fig:It Works!
[[./it_works.png]]

\newpage
Now we attempt to open the URL "https://www.badstore.net" (which is
port 443) in Firefox, which our hosts file redirects to our internal
Apache web server that we setup, and are immediately prompted with a
warning by Firefox that the certificate is untrusted (because, of
course, it is self-signed). We can go ahead and confirm a security
exception to tell Firefox to trust our completely insecure
certificate, and then access the website over a "secure" connection.

#+CAPTION: HTTPS Bad Store Page
#+NAME:   fig:https://www.badstore.net
[[./https.png]]

To answer the questions as per the lab:
- Yes, the silver padlock in the lower right-hand corner exists
- The validation period of the certificate is from 11/30/2013 -
  11/30/2014 (365 days).
- It was issued by "Pace University" (us, as per the information we
  added when we became our own CA)
- Its functionality is to allow for encrypted asymmetric communication
  between the user's browser and our server. This certificate will be
  used by the server and the browser to securely exchange a temporary
  symmetric encryption key for faster encrypted communication (the SSL
  Handshake).

* 4.4 Client SSL Handshakes
The following text was captured from a GET request to our Apache2 server.

#+BEGIN_SRC text
CONNECTED(00000003)
---
Certificate chain
 0 s:/C=US/ST=New York/L=New York/O=Pace University/OU=CSIS-IT300/CN=www.BadStore.net/emailAddress=admin@badstore.net
   i:/C=US/ST=New York/L=New York/O=Pace University/OU=CSIS-IT300/CN=www.BadStore.net/emailAddress=admin@badstore.net
---
Server certificate
-----BEGIN CERTIFICATE-----
MIICuTCCAiICCQDOGAJHzJMg+zANBgkqhkiG9w0BAQUFADCBoDELMAkGA1UEBhMC
VVMxETAPBgNVBAgTCE5ldyBZb3JrMREwDwYDVQQHEwhOZXcgWW9yazEYMBYGA1UE
ChMPUGFjZSBVbml2ZXJzaXR5MRMwEQYDVQQLEwpDU0lTLUlUMzAwMRkwFwYDVQQD
ExB3d3cuQmFkU3RvcmUubmV0MSEwHwYJKoZIhvcNAQkBFhJhZG1pbkBiYWRzdG9y
ZS5uZXQwHhcNMTMxMjAxMDAyMjQwWhcNMTQxMjAxMDAyMjQwWjCBoDELMAkGA1UE
BhMCVVMxETAPBgNVBAgTCE5ldyBZb3JrMREwDwYDVQQHEwhOZXcgWW9yazEYMBYG
A1UEChMPUGFjZSBVbml2ZXJzaXR5MRMwEQYDVQQLEwpDU0lTLUlUMzAwMRkwFwYD
VQQDExB3d3cuQmFkU3RvcmUubmV0MSEwHwYJKoZIhvcNAQkBFhJhZG1pbkBiYWRz
dG9yZS5uZXQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALU402W2zyvZJQiR
W0COPNSHA6MalVy4rXGoS6JJXwbiGze4Z9ZxXpi46UShxpFZ0+VzsZfppvnfrOuP
qO0nP8kaaztnPiLWD4P/OsxHl3FWvB4qIgWVBt72ula0eepp0I8nWh0Nya0qeuQ1
4FcXJ/iR4yIHrFcA2fC+/HrH45WNAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAcetX
4JZaqWN37moErCKlc48AXjy2N6Z2g2UVkZr2qbiYu6L2O6H1ChlTNSqFefMzea0t
th27n0Lj5XS2wrQ3x9GJFK7vhj1r4JxmMd1EJIWAaI2q3+6QmLnktHp4U//yZaLn
RaEliLtb7cnGxWEW387kzykpEz2erAbb54m4624=
-----END CERTIFICATE-----
subject=/C=US/ST=New York/L=New York/O=Pace University/OU=CSIS-IT300/CN=www.BadStore.net/emailAddress=admin@badstore.net
issuer=/C=US/ST=New York/L=New York/O=Pace University/OU=CSIS-IT300/CN=www.BadStore.net/emailAddress=admin@badstore.net
---
No client certificate CA names sent
---
SSL handshake has read 1451 bytes and written 293 bytes
---
New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA
Server public key is 1024 bit
Secure Renegotiation IS supported
Compression: zlib compression
Expansion: zlib compression
SSL-Session:
    Protocol  : TLSv1
    Cipher    : DHE-RSA-AES256-SHA
    Session-ID: 15AC5EB5AA13C3A3C6B4402539023992FAC0EB23B3A909933735A7E09CA580CD
    Session-ID-ctx:
    Master-Key: FE98449183B19680DEAE1BE73EA64D0D31F250666606933DD9CFD754509A919CB87A9E025D27A6374C5DC77D6D26991E
    Key-Arg   : None
    TLS session ticket:
    0000 - 0f 3f f6 02 52 cf 39 6c-2f 2f db ee ac 4f de 1a   .?..R.9l//...O..
    0010 - 7e 36 21 10 33 7e ea 4c-08 98 19 9e 0a 31 bd 68   ~6!.3~.L.....1.h
    0020 - 25 55 b9 d2 ec 8a 6d e2-b8 d0 52 69 3f 2b e8 ac   %U....m...Ri?+..
    0030 - 87 b4 64 38 de 8f 46 41-ce da 52 3b da 95 8b be   ..d8..FA..R;....
    0040 - f0 bc 2a 96 32 a0 1c d0-b3 34 d6 3d a3 40 48 2d   ..*.2....4.=.@H-
    0050 - 9b 4c db 83 32 8b 04 e0-88 7e f3 c1 78 f1 cf d3   .L..2....~..x...
    0060 - 04 02 8a da 21 c3 4c 89-c2 22 a9 27 c9 13 d6 be   ....!.L..".'....
    0070 - 39 9e d9 d0 f1 fe ce 9b-64 37 b5 1a c9 c7 be 6d   9.......d7.....m
    0080 - 9a c7 69 7d 0c a8 e4 c0-b5 a0 0f 84 df d5 7b f2   ..i}..........{.
    0090 - f7 92 de 63 af 2d 6a 54-e3 66 e7 e5 02 f1 14 80   ...c.-jT.f......
    00a0 - 35 67 60 32 c6 e5 3f fa-91 41 6b 98 8b ca 98 c5   5g~2..?..Ak.....
    00b0 - 61 46 d9 73 57 e1 e6 40-69 ce 5b a9 3b c0 98 bc   aF.sW..@i.[.;...

    Compression: 1 (zlib compression)
    Start Time: 1385859624
    Timeout   : 300 (sec)
    Verify return code: 18 (self signed certificate)
---
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>404 Not Found</title>
</head><body>
<h1>Not Found</h1>
<p>The requested URL /HTTP/1.1 was not found on this server.</p>
<hr>
<address>Apache/2.2.16 (Ubuntu) Server at www.badstore.net Port 443</address>
</body></html>
closed
#+END_SRC

\noindent Why does the web server send this information?
- The handshake is a method of trading parameters required for
  encrypted communication using symmetric methods as well
  acknowledgement that a message was received successfully or that the
  message failed.
 
\noindent What information does this file contain?
- Connected tag 
- Certificate chains, certificate origin address 
- Server Certificate, the public RSA key
- Client certificate authority names, if sent
- SSL handshake bytes read and written.
- Cipher type, each party must agree on this for workable encrypted
  communication.
- Size of public key, each party must agree on this for workable encrypted
  communication.
- Support status of secure renegotiation, whether each party agrees on
  how to change session key or security parameters in shared
  communication channels.
- Compression type, if compression used they must be compatible with this. 
- Expansion type, if compression used they must be compatible with this. 
- SSL-Session information: The following were the agreed upon
  parameters that resulted from the handshake:
  - Protocol
  - Cipher
  - Session-ID
  - Master-Key
  - Key-Args
  - TLS session ticket
  - Compression
  - Start Time
  - Timeout
  - Return code verification
- Closed tag
