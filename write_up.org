#+TITLE:     2013-FA-CS-336-LA-05-AndyS-SheaN
#+AUTHOR:    Andrew Schwartzmeyer, Shea Newton
#+EMAIL:     schw2620@vandals.uidaho.edu
#+DATE:      2013-11-30 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* TODO LA-05 SSL :noexport:
   DEADLINE: <2013-11-24 Sun>

For this laboratory assignment please follow the instructions in the
laboratory in the link below and for preparing your laboratory report
please follow the instructions in this posting plus all the guidelines
posted within this course site under Course Info -> Coursework
Submission Instructions -> LA-Laboratory Report Submissions.

Secure Web and SSL/TLS

Laboratory Instructions:

http://csis.pace.edu/~lchen/sweet/modules/3-SecureTransaction.pdf

These laboratories have been developed by Li-Chiou Chen of Pace
University and collaborators with sponsorship from the National
Science Foundation (NSF).

Prepare and submit a laboratory report in PDF following the guidelines
posted within this course site under Course Info -> Coursework
Submission Instructions -> LA-Laboratory Report Submissions.

* 4.1 Web Browser Certificate Management
Protocols used for web transactions:
- SSL 3.0
- TLS 1.0

\noindent Two Certificate Authorities:
- Baltimore CyberTrust Root
- certSigh ROOT CA

\newpage

#+CAPTION: Baltimore CyberTrust Root Certificate
#+NAME:   fig:SED-HR4049
[[./baltimore.png]]


\noindent Encryption Algorithms
- Baltimore CyberTrust Root
   - PKCS #1 with SHA-1 With RSA Encryption
- certSigh ROOT CA
  - PKCS #1 with SHA-1 With RSA Encryption
 


\noindent Public Key field:
- Baltimore CyberTrust Root
  - 2048 bits
- certSigh ROOT CA
  - 2048 bits

\noindent Protocol to verify certificates:
- Online Certificate Status Protocol (OCSP)

\noindent When OCSP certificate is treated as invalid when:
- If certificate has been revoked by issuing authority OCSP server
  connection will fail and certificate will be treated as invalid.


* 4.1 Creating SSL Certificates Using OpenSSL
** Creating public/private key pair
To generate a Certificate Signing Request (CSR), first we must generate our
own public/private key pair (in the directory `/etc/apache2/ssl` for
convenience), using the command `sudo openssl genrsa -des3 -out
server.key 1024`. We used the passphrase "lab5".

** Generating the CSR
Next we store said passphrase in `/etc/apache2/ssl_passphrase`,
replacing the current entry of "123456". With this done, we now
generate an actual CSR with the command `sudo openssl req -new -key
server.key -out server.csr`, filling in the certificate information
with that provided by the lab.

** Generating our certificate
Now we make our own self-signed certificate valid for a year with the
command `sudo openssl x509 -req -days 365 -in server.csr -signkey
server.key -out server.crt`.

* 4.2 Configuring Apache2 with BadStore.net
** Enabling SSL module for Apache2
We're asked to enable the SSL module for Apache 2 with the command
`sudo a2enmod ssl`; however, it was already enabled.

** Creating BadStore.net's VirtualHost
We copy Apache2's default virtual host configuration from
`/etc/apache2/sites-available/default` to
`/etc/apache2/sites-available/www.badstore.net`. Of course, we not
have to adjust the VirtualHost port to 443, add the line "ServerName
www.badstore.net:443", change the DocumentRoot and Directory to point
to `/var/www/badstore`, and enable SSL for the host with the lines:

#+BEGIN_SRC text
SSLEngine On
SSLCertificateFile /etc/apache2/ssl/server.crt
SSLCertificateKeyFile /etc/apache2/ssl/server.key
#+END_SRC

** Enabling the site
We now enable the site with the command `sudo a2ensite
www.badstore.net`, and restart the Apache2 server with `sudo service
apache2 restart`.

** Editing the hosts file
Since this is a local site, we change our hosts file to point 127.0.0.1 from localhost to the Apache2 VirtualHost www.badstore.net.

** Testing
Going to the URL "http://www.badstore.net" (not, contrary to the lab,
localhost, as it no longer resolves to anything since we previously
removed it from our hosts file), will resolve to Apache2's default
website (the "It works!" page), as our hosts file points to the IP
127.0.0.1 (on which Apache is listening), and specifying http instead
of https uses port 80, for which Apache's default site is
listening. Our VirtualHost listens only to 443.

#+CAPTION: HTTP It Works Page
#+NAME:   fig:It Works!
[[./it_works.png]]

Now we attempt to open the URL "https://www.badstore.net" (which is
port 443) in Firefox, which our hosts file redirects to our internal
Apache web server that we setup, and are immediately prompted with a
warning by Firefox that the certificate is untrusted (because, of
course, it is self-signed). We can go ahead and confirm a security
exception to tell Firefox to trust our completely insecure
certificate, and then access the website over a "secure" connection.

#+CAPTION: HTTPS Bad Store Page
#+NAME:   fig:https://www.badstore.net
[[./https.png]]

